name: Release CI/CD

# Solo se ejecuta cuando creas un tag de versiÃ³n
on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.0.0, etc.

env:
  GO_VERSION: '1.23'

jobs:
  validate-modules:
    name: Validate ${{ matrix.module }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        module:
          - common
          - logger
          - auth
          - messaging/rabbit
          - database/postgres
          - database/mongodb

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Descargar dependencias
        working-directory: ${{ matrix.module }}
        run: go mod download

      - name: Verificar formato
        working-directory: ${{ matrix.module }}
        run: |
          if ! gofmt -l . | grep -q .; then
            echo "âœ“ CÃ³digo formateado correctamente"
          else
            echo "âœ— CÃ³digo no estÃ¡ formateado:"
            gofmt -l .
            exit 1
          fi

      - name: AnÃ¡lisis estÃ¡tico (go vet)
        working-directory: ${{ matrix.module }}
        run: go vet ./...

      - name: Ejecutar tests
        working-directory: ${{ matrix.module }}
        run: go test -v -race ./...

      - name: Tests con cobertura
        working-directory: ${{ matrix.module }}
        run: |
          mkdir -p coverage
          go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./... || true
          if [ -f coverage/coverage.out ]; then
            go tool cover -func=coverage/coverage.out
          fi

      - name: Verificar build
        working-directory: ${{ matrix.module }}
        run: go build -v ./...

      - name: Subir cobertura
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ${{ matrix.module }}/coverage/coverage.out
          flags: ${{ matrix.module }}
          name: codecov-release-${{ matrix.module }}
          fail_ci_if_error: false

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-modules]
    permissions:
      contents: write

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Obtener tag actual
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Extraer changelog para esta versiÃ³n
        id: changelog
        run: |
          TAG=${{ steps.tag.outputs.tag }}

          # Extraer secciÃ³n del CHANGELOG para esta versiÃ³n
          if grep -q "## \[${{ steps.tag.outputs.version }}\]" CHANGELOG.md; then
            CHANGELOG=$(sed -n "/## \[${{ steps.tag.outputs.version }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          else
            CHANGELOG="Release $TAG"
          fi

          # Guardar a archivo para evitar problemas con caracteres especiales
          echo "$CHANGELOG" > /tmp/changelog.md

      - name: Crear GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG=${{ steps.tag.outputs.tag }}

          # Crear release con gh CLI
          gh release create "$TAG" \
            --title "Release $TAG - Arquitectura Modular" \
            --notes-file /tmp/changelog.md \
            --notes "

          ---

          ## ðŸ“¦ InstalaciÃ³n por MÃ³dulo

          ### Common (Errors, Types, Validator, Config)
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/common@$TAG
          \`\`\`

          ### Logger (Zap)
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/logger@$TAG
          \`\`\`

          ### Auth (JWT)
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/auth@$TAG
          \`\`\`

          ### RabbitMQ
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/messaging/rabbit@$TAG
          \`\`\`

          ### PostgreSQL
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/database/postgres@$TAG
          \`\`\`

          ### MongoDB
          \`\`\`bash
          go get github.com/EduGoGroup/edugo-shared/database/mongodb@$TAG
          \`\`\`

          ## ðŸŽ¯ Beneficios de la Arquitectura Modular

          - âœ… **Dependencias selectivas**: Solo descarga lo que necesitas
          - âœ… **Binarios optimizados**: Menor tamaÃ±o del ejecutable
          - âœ… **Mejor mantenibilidad**: Cada mÃ³dulo es independiente
          - âœ… **Testing modular**: Tests aislados por mÃ³dulo

          ## ðŸ“š DocumentaciÃ³n

          - [CHANGELOG.md](https://github.com/EduGoGroup/edugo-shared/blob/$TAG/CHANGELOG.md)
          - [UPGRADE_GUIDE.md](https://github.com/EduGoGroup/edugo-shared/blob/$TAG/UPGRADE_GUIDE.md)
          - [README.md](https://github.com/EduGoGroup/edugo-shared/blob/$TAG/README.md)

          ---

          ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)"
