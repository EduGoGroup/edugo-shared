name: Tests with Coverage

# Manual o en PRs
on:
  workflow_dispatch:  # Manual desde GitHub UI
  pull_request:
    branches: [ main, develop ]

jobs:
  test-coverage:
    name: Coverage ${{ matrix.module }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module:
          - common
          - logger
          - auth
          - messaging/rabbit
          - database/postgres
          - database/mongodb

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Descargar dependencias
        working-directory: ${{ matrix.module }}
        run: go mod download

      - name: Ejecutar tests con cobertura
        working-directory: ${{ matrix.module }}
        run: |
          mkdir -p coverage
          go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./...

          if [ -f coverage/coverage.out ]; then
            echo ""
            echo "📊 Cobertura de ${{ matrix.module }}:"
            go tool cover -func=coverage/coverage.out | tail -1
          fi

      - name: Subir reporte de cobertura
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.module }}
          path: ${{ matrix.module }}/coverage/coverage.out
          retention-days: 30

      - name: Subir a Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ${{ matrix.module }}/coverage/coverage.out
          flags: ${{ matrix.module }}
          fail_ci_if_error: false

  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    needs: test-coverage
    if: always()

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts

      - name: Generate summary
        run: |
          echo "# 📊 Resumen de Cobertura por Módulo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Módulo | Cobertura |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-----------|" >> $GITHUB_STEP_SUMMARY

          for dir in coverage-artifacts/coverage-*/; do
            if [ -d "$dir" ]; then
              module=$(basename "$dir" | sed 's/coverage-//')
              if [ -f "$dir/coverage.out" ]; then
                coverage=$(go tool cover -func="$dir/coverage.out" | tail -1 | awk '{print $NF}')
                echo "| $module | $coverage |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
